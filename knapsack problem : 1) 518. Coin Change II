1 ) RECURSION
    class Solution {
  public:
      int find(int index , int n , int amount , vector<int> &coins)
      {
          if(amount == 0)
          return 1;
          if(amount < 0 || index >= n)
          return 0;
  
          return find(index , n , amount - coins[index] , coins)+find(index+1 , n , amount , coins);
          
      }
      int change(int amount, vector<int>& coins) 
      {
          int n = coins.size();
          
          return find(0,n,amount , coins);
      }
  };

2) TOP-DOWN + MEMO

    class Solution {
  public:
      int find(int index , int n , int amount , vector<int> &coins, vector<vector<int>>&dp)
      {
  
          if(amount == 0)
              return 1;
          if(index < 0)
              return 0;
  
          if(dp[index][amount]!=-1)
              return dp[index][amount];
          if(coins[index] > amount )
          {
              return  dp[index][amount]=find(index-1 , n , amount , coins,dp);
          }
          else
              return dp[index][amount]=find(index , n , amount - coins[index] , coins,dp)
                                      +find(index-1 , n , amount , coins,dp);
          
      }
      int change(int amount, vector<int>& coins) 
      {
          int n = coins.size();
          vector<vector<int>>dp(n+1,vector<int>(amount+1,-1));
          return find(n-1,n,amount , coins,dp);
      }
  };

3) BOTTOM-UP


  
