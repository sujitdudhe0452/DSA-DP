1) RECURSION

    int find(int n , int m , string &x , string &y)
    {
        if(n == 0 || m== 0)
        return 0;
        
        if(x[n-1] == y[m-1])
            return 1+find(n-1,m-1,x,y);
        else
            return max(find(n-1,m,x,y),find(n,m-1,x,y));
    }
    int lcs(int n, int m, string str1, string str2) {
        // your code here
        return find(n,m,str1,str2);
    }


2) TOP  DOWN + MEMO

    int find(int n , int m , string &x , string &y,vector<vector<int>>&dp)
    {
        if(n == 0 || m== 0)
        return 0;
        
        if(dp[n][m]!=-1)
        return dp[n][m];
        
        if(x[n-1] == y[m-1])
            return dp[n][m] = 1+find(n-1,m-1,x,y,dp);
        else
            return dp[n][m] =max (find(n-1,m,x,y,dp),find(n,m-1,x,y,dp));
    }
    int lcs(int n, int m, string str1, string str2) {
        // your code here
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        return find(n,m,str1,str2,dp);
    }


3) BOTTOM UP

   int lcs(int n, int m, string str1, string str2) {
        // your code here
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=1;i<=n;i++)
        for(int j=1;j<=m;j++)
        {
            if(str1[i-1] == str2[j-1])
            dp[i][j] = 1+dp[i-1][j-1];
            else
            dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
        }
        
        return dp[n][m];
    }
