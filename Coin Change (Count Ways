
  1) TOP DOWN + RECU
    long long int find(int N , int sum , int coins[],vector<vector<long long int>>&dp)
    
    {
        //base condition
        if(sum==0)
            return 1;
        
        if(N==0)
            return 0;
        if(dp[N][sum]!=-1)
        {
            return dp[N][sum];
        }
        if(coins[N-1] > sum)
            return dp[N][sum] = find(N-1,sum,coins,dp);
        else
            return dp[N][sum] = find(N,sum-coins[N-1],coins,dp)+find(N-1,sum,coins,dp);
    }
    long long int count(int coins[], int N, int sum) {

        // code here.
        vector<vector<long long int>>dp(N+1,vector<long long int>(sum+1,-1));
        return find(N,sum,coins,dp);
    }
};


2) BOTTOM UP

        long long int count(int coins[], int N, int sum) {
  
          // code here.
          vector<vector<long long int>>dp(N+1,vector<long long int>(sum+1,0));
     
          
          for(int i=0;i<=N;i++ )
          {
              dp[i][0]=1;
          }
          for(int i=1;i<=N;i++)
          for(int j=1;j<=sum;j++)
          {
              if(coins[i-1] > j)
                  dp[i][j] =dp[i-1][j];
              else
                  dp[i][j] = dp[i][j-coins[i-1]]+dp[i-1][j];        
              
          }
          return dp[N][sum];
      }
